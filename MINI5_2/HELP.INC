.byte " Hilfstext zum Z80-Mini Betriebssystem 04.01 (c) 07.06.1997\r\n"
.byte "\r\n"
.byte " Befehl                     Funktion\r\n"
.byte " ---------------------------------------------------------------------------\r\n"
.byte " ALLOC <Bytes>              Speicher reservieren\r\n"
.byte " AUTO <Adresse>             Autostart-Programm installieren\r\n"
.byte "\t\t\t    <Adresse> = 0 fÅr aufheben\r\n"
.byte " B <Adresse>                Breakpoint setzen ( 0 fÅr Breakpoint lîschen )\r\n"
.byte " BAUD <Baudrate>            RS232 Baudrate einstellen ( z.B. BAUD &19200 )\r\n"
.byte " BEFEHLE                    Liste aller vorhandenen Befehle\r\n"
.byte " C [<Adresse>]              Unterprogramm-Aufruf\r\n"
.byte " CLS                        Bildschirm lîschen\r\n"
.byte " CHKS <von> [<bis>] [<st>]  Checksumme von Speicherbereich berechnen,\r\n"
.byte "\t\t\t    Startwert <st>\r\n"
.byte " D [<von>] [<bis>]          Speicherinhalt in HEX und ASCII ausgeben\r\n"
.byte " DEL <Variable>             Variable lîschen\r\n"
.byte " E [<Adresse>]              Speicherinhalt verÑndern\r\n"
.byte " ECHO                       empfangene Zeichen zurÅcksenden\r\n"
.byte " F <von> [<bis>] [<Byte>]   Speicher fÅllen\r\n"
.byte " FREE <Adresse>             Speicher freigeben\r\n"
.byte " G [<Adresse>]              Programm starten\r\n"
.byte " H                          Hilfe\r\n"
.byte " HEXDUMP                    empfangene Zeichen im HEX-Code zurÅcksenden\r\n"
.byte " I [<I/O>] [<n>]            <n> Eingaben von I/O-Adresse\r\n"
.byte " L                          Intel-Hex-Datei laden¿N\r\n"
.byte " L <von> [<bis>]            Intel-Hex-Datei in den angegebene Bereich laden\r\n"
.byte " LOAD <Speichergrîsse>      Speicher reservieren und laden\r\n"
.byte " M <von> [<bis>] <nach>     Speicherinhalt verschieben\r\n"
.byte " MEM                        öbersicht des belegten und freien Speichers\r\n"
.byte " O [<I/O>] <Byte> [...]     Ausgabe(n) an I/O-Adresse\r\n"
.byte " P <von> [<bis>]            Intel-Hex-Datei ausgeben\r\n"
.byte " PAGE <Seite>               Speicherseitenumschaltung bei Z80-MINI 3\r\n"
.byte " POP                        Wert vom User-Stack hohlen\r\n"
.byte " PRN <Wert>                 Wert ausgeben\r\n"
.byte " PUSH <Wert>                Wert auf User-Stack ablegen\r\n"
.byte " Q [<Adresse>]              Betriebssystem verlassen, Sprung an <Adresse>\r\n"
.byte " R [<Reg> <Wert>]           Registerinhalt anzeigen bzw. Ñndern\r\n"
.byte " RCLR                       Stack und alle User-Register lîschen\r\n"
.byte " S [<Adresse>]              Einzelschritt ohne Unterprogramm\r\n"
.byte " SET <Variable> <Wert>      Variable definieren\r\n"
.byte " SHRINK <Adresse> <Grîsse>  Speicherbereich verkleinern\r\n"
.byte " T [<Adresse>]              Einzelschritt mit Unterprogramm\r\n"
.byte " U [<Adresse>]              ProgrammausfÅhrung bis RET-Anweisung\r\n"
.byte " UNDO                       letzte User-Register-Inhalte zurÅckholen\r\n"
.byte "\t\t\t    Der Stack wird nicht wiederhergestellt.\r\n"
.byte " V                          Informationen zum Programm ausgeben\r\n"
.byte " VAR                        Variabelenliste ausgeben\r\n"
.byte " W <Adresse>                Datenbreich beim debugen beobachten\r\n"
.byte " WATCHDOG <0 oder 1>        Watchdog freigeben oder sperren\r\n"
.byte " @                          tue nichts\r\n"
.byte " ?                          Hilfe¿N\r\n"
.byte "\r\n"
.byte " - Parameter in [ ] sind optional.\r\n"
.byte " - Eingabefelder kînnen durch Kommata getrennt werden.\r\n"
.byte " - Werteingaben: bin %, dez &, hex $ ( z.B. %10101010, &170, $aa )\r\n"
.byte " - Werteingaben in ASCI z.B. mit 'A oder 'A'\r\n"
.byte " - Variabelenabfrage beginnen mit * ( z.B. prn *dudei )\r\n"
.byte " - Control-C unterbricht das laufende Programm.\r\n"
.byte " - Der Optcode $FF ( Rst $38 ) ruft den Monitor auf.\r\n"
.byte " - Bei Z80-MINI 3 wird beim Reset die Seite 1 ausgewÑhlt.\r\n"
.byte " - Die CPU arbeitet im Interrupt-Mode 2.\r\n"
.byte " - RS-232 Einstellung: 38400 Baud, 8 Datenbits, 1 Stopbit, keine ParitÑt\r\n"
.byte "\r\n"

